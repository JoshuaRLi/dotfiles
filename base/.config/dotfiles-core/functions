# See also: https://github.com/JoshuaRLi/bin

# enforce argc and display usage when violated.
usage () {
    if [ "$1" -lt "$2" ]; then
        >&2 cat <<EOF
${3}
usage: ${4}
EOF
        return 1
    fi
}

die () { printf %s\\n "$1"; return 1; }

require () {
    df_require "$1" || die "${1} is required, but not found"
}


enc () {
    require openssl || return $?
    require shred || return $?
    usage $# 1 'password-encrypts a FILE with good openssl enc settings as of Mar 2019.' \
        "$0 FILE" || return $?
    openssl enc -aes-256-ctr -pbkdf2 -iter 1000000 -md sha256 -salt \
        -in "$1" \
        -out "${1}.aes-256-ctr-pbkdf2-1000000-sha256.enc" \
        && echo 'done. shredding original file, please wait...' && \
    shred --random-source=/dev/urandom -zu "$1"
}


# man wrapper with --help fallback.
h () {
    man "$@" 2>/dev/null || "$@" --help 2>&1 | "$PAGER"
}


wscan () {
    require iw || return $?
    require awk || return $?
    require grep || return $?
    usage $# 1 'uses INTERFACE to scan for wireless AP SSIDs.' \
        "$0 INTERFACE" || return $?
    sudo iw dev "$1" scan | grep 'SSID:' | awk '{if ($2) print $2;}'
}


lanip () {
    require hostname || return $?
    printf %s\\n "$(hostname -i)"
}

wanip () {
    require dig || return $?
    printf %s\\n "$(dig @resolver1.opendns.com ANY myip.opendns.com +short)"
}


gitignore () {
    require curl || return $?
    usage $# 1 'gitignore.io download wrapper. `gitignore list` to get a types listing.' \
        "$0 TYPE [TYPE ...]" || return $?
    if [ "$1" == 'list' ]; then
        curl -sL https://gitignore.io/api/list | tr ',' '\n'
    else
        # local's not posix, but most shells support it
        local URL="https://www.gitignore.io/api/${1}"
        shift; for d in "$@"; do URL="${URL},${d}"; done
        curl -L "$URL" -fo .gitignore || die "one or more TYPE was invalid."
    fi
}


sshnew () {
    require ssh-keygen || return $?
    usage $# 1 'Generates a secure ssh keypair (openssh format) using ed25519.' \
        "$0 [keypair name] [optional comment]" || return $?
    ssh-keygen -t ed25519 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}


sshnewrsa () {
    require ssh-keygen || return $?
    usage $# 1 'Generates a secure ssh keypair (openssh format) using rsa-4096.' \
        "$0 [keypair name] [optional comment]" || return $?
    ssh-keygen -t rsa -b 4096 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}

# todo: default to host machine username, and ssh port 22.
# also add optional password field to sshnew and let this func pass that optionally as well.
instassh () {
    require ssh-copy-id || return $?
    usage $# 4 'Automates ssh keypair generation and installation.' \
        "$0 [keypair name] [username] [ipv4 addr] [ssh port]" || return $?
    (
    set -eu
    sshnew "$1" ''
    ssh-copy-id -i "${HOME}/.ssh/${1}.pub" "${2}@${3}" -p "$4"
    cat <<EOF >> "${HOME}/.ssh/config"

Host ${1}
    HostName ${3}
    Port ${4}
    User ${2}
    IdentityFile ~/.ssh/${1}
EOF
    ) || {
        rm -vf "${HOME}/.ssh/${1}"{,.pub};
        die 'errored and cleaned up.';
    }
}


# enforce permissions and ownership on important files.
lockdown () {
    sudo chown -R "$(whoami)" "${HOME}/."{ssh,gnupg}
    chmod 700 "${HOME}/."{ssh,gnupg}
    chmod 600 -vR "${HOME}/.gnupg/"*
    chmod 700 "${HOME}/.gnupg/private-keys-v1.d"
    chmod 700 "${HOME}/.gnupg/crls.d"
    chmod 400 -vR "${HOME}/.ssh/"*
    chmod 444 -vR "${HOME}/.ssh/"*.pub
    chmod 600 -v "${HOME}/.ssh/config"
    chmod 600 -v "${HOME}/.ssh/known_hosts"
}
