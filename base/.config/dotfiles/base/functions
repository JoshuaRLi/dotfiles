# See also: https://github.com/JoshuaRLi/bin

# enforce argc and display usage when violated.
_usage () {
    if [ "$1" -lt "$2" ]; then
        cat <<EOF
${3}

    USAGE: ${4}

EOF
        return 1
    fi
}


lnc () {
    _usage $# 1 'Creates a symlink to the target in pwd.' \
        "$0 path/to/target" || return 1
    ln -sv "$(readlink -f "$1")" "$(pwd)"
}


# auto-ls after cd. Does not show hidden files.
cd () {
    if [ -n "$1" ]; then
        builtin cd "$1" && l
    else
        builtin cd "$HOME" && l
    fi
}


# man wrapper with --help fallback.
h () {
    man "$@" 2>/dev/null || "$@" --help 2>&1 | less -irS
}


wscan () {
    _usage $# 1 'Uses the interface to scan for wireless AP SSIDs.' \
        "$0 interface" || return 1
    sudo iw dev "$1" scan | grep SSID | awk '{print $2}'
}


# print local and external ip.
myip () {
    local lip="$(ip route get 1.1.1.1 | awk '{print $(NF-2); exit}')"
    local eip="$(df_require dig && \
        dig +short myip.opendns.com @resolver1.opendns.com || \
         curl -s http://whatismyip.akamai.com)"
    cat <<EOF
Local: $lip
External: $eip
EOF
}


killtty () {
    _usage $# 1 'Kills the specified tty by number.' \
        "$0 [tty number]" || return 1
    sudo kill "$(who -u | grep "tty${1}" | tr -s ' ' | cut -d ' ' -f 6)"
}


gitignore () {
    _usage $# 1 'gitignore.io download wrapper.' \
        "$0 [directive ...]" || return 1
    local URL="https://www.gitignore.io/api/${1}"
    shift; for d in "$@"; do URL="${URL},${d}"; done
    wget "$URL" -O .gitignore
}


sshnew () {
    _usage $# 1 'Generates a secure ssh keypair (openssh format) using ed25519.' \
        "$0 [keypair name] [optional comment]" || return 1
    ssh-keygen -o -t ed25519 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}


instassh () {
    _usage $# 4 'Automates ssh keypair generation and installation.' \
        "$0 [keypair name] [username] [ipv4 addr] [ssh port]" || return 1
    (
    set -eu
    sshnew "$1" ''
    printf '\ncopying pubkey...\n'
    ssh-copy-id -i "${HOME}/.ssh/${1}.pub" "${2}@${3}" -p "$4"
    printf 'writing config stanza...\n'
    tee <<EOF >> "${HOME}/.ssh/config"

Host ${1}
    IdentitiesOnly yes
    HostName ${3}
    Port ${4}
    User ${2}
    IdentityFile ~/.ssh/${1}
EOF
    ) || { printf '\nerrored.\n'; rm -vf "${HOME}/.ssh/${1}"{,.pub}; }
}


# Use this only for compatibility with older or embedded systems.
sshnewrsa () {
    _usage $# 1 'Generates a secure ssh keypair (openssh format) using rsa-4096.' \
        "$0 [keypair name] [optional comment]" || return 1
    ssh-keygen -o -t rsa -b 4096 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}


# enforce permissions and ownership on important files.
lockdown () {
    sudo chown -R "$(whoami)" "${HOME}/."{ssh,gnupg}
    chmod 700 "${HOME}/."{ssh,gnupg}
    chmod 600 -vR "${HOME}/.gnupg/"*
    chmod 700 "${HOME}/.gnupg/private-keys-v1.d"
    chmod 700 "${HOME}/.gnupg/crls.d"
    chmod 400 -vR "${HOME}/.ssh/"*
    chmod 444 -vR "${HOME}/.ssh/"*.pub
    chmod 600 -v "${HOME}/.ssh/config"
    chmod 600 -v "${HOME}/.ssh/known_hosts"
}


# TODO remove this when I finish wiki archive project
# download an entire mediawiki to a single XML file (text-only).
wikimirror () {
    _usage $# 2 'Download a mediawiki.' \
        "$0 [base url] [outfile.xml]" || return 1
    curl -d "&pages=Main_Page&offset=1&action=submit"   \
        --compressed -H 'Accept-Encoding: gzip,deflate' \
        "${1}/index.php?title=Special:Export"           \
        -o "$2"
}


# TODO replace this with an alias to tb-client when I finish the rewrite
# upload stdin or a file to pb.
pb () {
    curl -F "c=@${1:--}" "https://ptpb.pw/"
}


rmirror () {
    _usage $# 2 'rsync shortcut for backup/sync. results in path/to/destdir/srcdir.' \
        "$0 path/to/srcdir path/to/destdir" || return 1
    # reflect deleted file changes in the destination
    rsync -aAXhP --delete "$1" "$2"
}


hmirror () {
    _usage $# 1 'rsync shortcut for home backup/sync. make sure backup dir is encrypted!' \
        "$0 /path/to/backup/dir" || return 1
    rsync -aAXhP --delete       \
        --exclude '.cache'      \
        --exclude '.thumbnails' \
        "$HOME" "$1"
}


smirror () {
    _usage $# 1 'rsync shortcut for system backup/sync.' \
        "$0 /path/to/backup/dir" || return 1
    sudo rsync -aAXhP --delete \
        --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/home/*","/lost+found"} \
        "/" "$1"
}
