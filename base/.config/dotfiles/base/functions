# See also: https://github.com/JoshuaRLi/bin

# enforce argc and display usage when violated.
_usage () {
    if [ "$1" -lt "$2" ]; then
        >&2 cat <<EOF
${3}
usage: ${4}
EOF
        return 1
    fi
}

die () {
    printf "%s\n" "$1"
    return 1
}


# man wrapper with --help fallback.
h () {
    man "$@" 2>/dev/null || "$@" --help 2>&1 | "$PAGER"
}


wscan () {
    _usage $# 1 'uses INTERFACE to scan for wireless AP SSIDs.' \
        "$0 INTERFACE" || return 1
    sudo iw dev "$1" scan | grep SSID | awk '{print $2}'
}


# print local and external ip.
myip () {
    local lip="$(ip route get 1.1.1.1 | awk '{print $(NF-2); exit}')"
    local eip="$(df_require dig && \
        dig +short myip.opendns.com @resolver1.opendns.com || \
         curl -s http://whatismyip.akamai.com)"
    cat <<EOF
Local: $lip
External: $eip
EOF
}


gitignore () {
    _usage $# 1 'gitignore.io download wrapper. `gitignore list` to get a types listing.' \
        "$0 TYPE [TYPE ...]" || return 1
    if [ "$1" == 'list' ]; then
        curl -sL https://gitignore.io/api/list | tr ',' '\n'
    else
        local URL="https://www.gitignore.io/api/${1}"
        shift; for d in "$@"; do URL="${URL},${d}"; done
        curl -L "$URL" -fo .gitignore || die "one or more TYPE was invalid."
    fi
}


sshnew () {
    _usage $# 1 'Generates a secure ssh keypair (openssh format) using ed25519.' \
        "$0 [keypair name] [optional comment]" || return 1
    ssh-keygen -o -t ed25519 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}


sshnewrsa () {
    _usage $# 1 'Generates a secure ssh keypair (openssh format) using rsa-4096.' \
        "$0 [keypair name] [optional comment]" || return 1
    ssh-keygen -o -t rsa -b 4096 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}


instassh () {
    _usage $# 4 'Automates ssh keypair generation and installation.' \
        "$0 [keypair name] [username] [ipv4 addr] [ssh port]" || return 1
    (
    set -eu
    sshnew "$1" ''
    printf '\ncopying pubkey...\n'
    ssh-copy-id -i "${HOME}/.ssh/${1}.pub" "${2}@${3}" -p "$4"
    printf 'writing config stanza...\n'
    tee <<EOF >> "${HOME}/.ssh/config"

Host ${1}
    IdentitiesOnly yes
    HostName ${3}
    Port ${4}
    User ${2}
    IdentityFile ~/.ssh/${1}
EOF
    ) || { printf '\nerrored.\n'; rm -vf "${HOME}/.ssh/${1}"{,.pub}; }
}


# enforce permissions and ownership on important files.
lockdown () {
    sudo chown -R "$(whoami)" "${HOME}/."{ssh,gnupg}
    chmod 700 "${HOME}/."{ssh,gnupg}
    chmod 600 -vR "${HOME}/.gnupg/"*
    chmod 700 "${HOME}/.gnupg/private-keys-v1.d"
    chmod 700 "${HOME}/.gnupg/crls.d"
    chmod 400 -vR "${HOME}/.ssh/"*
    chmod 444 -vR "${HOME}/.ssh/"*.pub
    chmod 600 -v "${HOME}/.ssh/config"
    chmod 600 -v "${HOME}/.ssh/known_hosts"
}
