# enforce argc and display usage when violated.
usage () {
    if [ "$1" -lt "$2" ]; then
        >&2 cat <<EOF
${3}
usage: ${4}
EOF
        return 1
    fi
}

die () { printf %s\\n "$1"; return 1; }

require () {
    df_require "$1" || die "${1} is required, but not found"
}

gitroot () {
    require git || return $?

    cd "$(git rev-parse --show-toplevel)"
}

lanip () {
    require ip || return $?
    usage $# 1 'Displays the LAN ip assigned to interface IFACE.' \
        "$0 IFACE" || return $?

    ip addr show dev "$1" | grep 'inet'
}

wanip () {
    require drill || return $?

    drill myip.opendns.com @resolver1.opendns.com IN A | grep myip.opendns.com | grep -v ';;' | awk '{print $5}'
    # drill whoami.cloudflare @1.1.1.1 CH TXT
}

sshnew () {
    require ssh-keygen || return $?
    usage $# 1 'Generates a secure ssh keypair (openssh format) using ed25519.' \
        "$0 [keypair name] [optional comment]" || return $?

    ssh-keygen -t ed25519 -a 100 -f "${HOME}/.ssh/${1}" -N '' -C "$2"
    chmod 400 -v "${HOME}/.ssh/${1}"
    chmod 444 -v "${HOME}/.ssh/${1}.pub"
}

# extension counter
ecount () {
    require fd || return $?

    fd -tf -x echo {/} | awk -F. 'NF > 1 {print tolower($NF)}' | sort | uniq -c | sort -n
}

esize () {
    require fd || return $?
    usage $# 1 'Reports total disk space taken up by files with the extension, in the current directory.' \
        "$0 extension" || return $?

    fd -e "$1" -0 | xargs -0 du -hc | awk 'END { print $1 }'
}

vcut () {
    require ffmpeg || return $?
    usage $# 3 'Cuts a video from start to end timestamp (format hh:mm:ss)' \
        "$0 file start end" || return $?

    fp="$1"
    fn="$(df_basename "$fp")"
    fd="$(df_dirname "$fp")"
    fn_noext="$(df_stripext "$fn")"
    fe="$(df_getext "$fn")"
    ffmpeg -i "$fp" -ss "$2" -to "$3" -c copy "${fd}/${fn_noext}-cut-${2}-${3}.${fe}"
}

mdl () {
    require youtube-dl || return $?
    require ffmpeg || return $?
    usage $# 1 'youtube-dl + ffmpeg (opus 96k reencode) music downloader' \
        "$0 music-url" || return $?

    youtube-dl --ignore-config --no-playlist \
        -x --audio-format best \
        --postprocessor-args '-c:a libopus -b:a 96K' \
        --add-metadata \
        -o "%(title)s [%(id)s].%(ext)s" "$1"
}

vdl () {
    require youtube-dl || return $?
    require ffmpeg || return $?
    usage $# 1 'youtube-dl + ffmpeg (hevc fast crf 30, opus 96k reencode into mkv) video downloader' \
        "$0 music-url" || return $?

    youtube-dl --ignore-config --no-playlist \
        -f bestvideo+bestaudio \
        --postprocessor-args '-c:v hevc -preset fast -crf 30 -c:a libopus -b:a 96K' \
        --add-metadata \
        --merge-output-format mkv \
        -o "%(title)s [%(id)s].%(ext)s" "$1"
}
